# cell index
0 0 !
# wrap modulus
52 1 !
# starting cell
3 2 !

# testing populating cells
# 1 3 !
# 1 4 !
# 1 5 !
# 1 6 !


[ advance-cell-index
    # read cell index
    0 @
    # add one
    1 +
    # read modulus, wrap by it
    1 @ %
    # put value back
    0 !
]

# get current cell
[ current-cell
    # read cell index, add offset
    0 @ 2 @ +
]

# mark cell
[ mark-cell
    1 current-cell !
]

# function to get next free cell
[ get-next-free-cell
  do
      current-cell @    # see if occupied
      # dup .
      1 =        # test
      4 * skip   # skip to true amount

      # if false
      mark-cell exitdo
      3 skip    # skip over true

      # if true  
      advance-cell-index
  1 redo
]

[ shuffle 
    52 0 1 for
        rand 1 @ * floor 0 !
        get-next-free-cell
        0 @ .
    next
]

# get-next-free-cell

shuffle
cr
