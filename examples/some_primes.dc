# let's print some primes:
# we have some helper functions, the main work is done by 'is-prime?' below.
# Then the primes are printed by a loop-through, and the '.rj' format
# directive is used to keep them right-aligned.

[ is-2-3-5-7?
    dup dup         # n n n
    2 =             # n n bool 
    swap dup        # n bool n n
    3 =             # n bool n bool
    swap dup        # n bool bool n n
    5 =             # n bool bool n bool
    swap            # n bool bool bool n
    7 =             # n bool bool bool bool
    or or or        # n bool
]

[ is-not-div-otherwise?
    dup 
    sqrt ceil 1 + 6 / ceil # ( add 1 + ?)
    1 max 1 1
    for
        dup i 6 * 1 - % 0 =
        over i 6 * 1 + % 0 =
        or
          2 * skip
        5 skip                 # false, still not divisible, keep searching
        drop 0 exitfor 3 skip  # true --
                               # exit as is-prime? being false,
                               # b/c number was divisible within
                               # search range
    next
    drop 1
]

[ is-div-by-2-3-5?
    dup             # n n 
    2 % 0 =         # n bool
    over            # n bool n 
    3 % 0 =         # n bool bool
    or over         # n bool n
    5 % 0 =         # n bool bool
    or              # n bool
    3 * skip
    is-not-div-otherwise? 2 skip  # false
    drop 0                        # true
]

[ is-prime
    is-2-3-5-7?
    3 * skip
    is-div-by-2-3-5? 2 skip   # false
    drop 1                    # true
]

[ test-primes
  2048 2 1 for
      i is-prime
      2 * skip  
      4 skip     # false
      i 4 4 .rj  # true
  next
  cr
]

s"  \n                           #### Some primes! ####\n \b" print
test-primes
